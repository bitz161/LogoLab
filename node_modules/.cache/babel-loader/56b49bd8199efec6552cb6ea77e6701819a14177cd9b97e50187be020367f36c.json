{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider, signOut, onAuthStateChanged } from \"firebase/auth\";\nimport { getFirestore, doc, setDoc, getDoc } from \"firebase/firestore\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB_v8ZabNFWAT12IPPPI_CjL6ZrrZBS0hc\",\n  authDomain: \"logolab-9f16c.firebaseapp.com\",\n  projectId: \"logolab-9f16c\",\n  storageBucket: \"logolab-9f16c.appspot.com\",\n  messagingSenderId: \"412573554975\",\n  appId: \"1:412573554975:web:3e425abccbb844e985782a\"\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\n\n// Initialize Firebase Auth and Firestore\nconst auth = getAuth(firebaseApp);\nconst db = getFirestore(firebaseApp);\nconst provider = new GoogleAuthProvider();\n\n// Set custom parameters for the Google Auth provider\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\n\n// Function to store user data in Firestore\nconst createUserDocumentFromAuth = async userAuth => {\n  if (!userAuth) return;\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n  const userSnapshot = await getDoc(userDocRef);\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email,\n      photoURL\n    } = userAuth;\n    const createdAt = new Date();\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        photoURL,\n        createdAt,\n        subscription: \"free\"\n      });\n    } catch (error) {\n      console.error(\"Error creating user document:\", error);\n    }\n  }\n  return userDocRef;\n};\n\n// Function to retrieve user information from Firestore by UID\nconst getUserByUID = async uid => {\n  try {\n    // Construct a reference to the user document using the UID\n    const userDocRef = doc(db, \"users\", uid);\n\n    // Retrieve the user document snapshot\n    const userSnapshot = await getDoc(userDocRef);\n\n    // Check if the document exists\n    if (userSnapshot.exists()) {\n      // Access the user data from the snapshot\n      const userData = userSnapshot.data();\n      return userData;\n    } else {\n      // Handle case where user document does not exist\n      console.log(\"User document does not exist\");\n      return null;\n    }\n  } catch (error) {\n    // Handle any errors that occur during the process\n    console.error(\"Error fetching user document:\", error);\n    return null;\n  }\n};\n\n// Export sign-in and sign-out functions\nexport const signInWithGooglePopup = async () => {\n  const result = await signInWithPopup(auth, provider);\n  await createUserDocumentFromAuth(result.user);\n  return result;\n};\nexport const signOutUser = () => signOut(auth);\nexport const onAuthStateChangedListener = callback => onAuthStateChanged(auth, callback);\nexport { auth, db, getUserByUID };","map":{"version":3,"names":["initializeApp","getAuth","signInWithPopup","GoogleAuthProvider","signOut","onAuthStateChanged","getFirestore","doc","setDoc","getDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","auth","db","provider","setCustomParameters","prompt","createUserDocumentFromAuth","userAuth","userDocRef","uid","userSnapshot","exists","displayName","email","photoURL","createdAt","Date","subscription","error","console","getUserByUID","userData","data","log","signInWithGooglePopup","result","user","signOutUser","onAuthStateChangedListener","callback"],"sources":["C:/Projects/Projects/LogoLab/src/utilities/firebase/firebase.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport {\r\n  getAuth,\r\n  signInWithPopup,\r\n  GoogleAuthProvider,\r\n  signOut,\r\n  onAuthStateChanged,\r\n} from \"firebase/auth\";\r\nimport { getFirestore, doc, setDoc, getDoc } from \"firebase/firestore\";\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyB_v8ZabNFWAT12IPPPI_CjL6ZrrZBS0hc\",\r\n  authDomain: \"logolab-9f16c.firebaseapp.com\",\r\n  projectId: \"logolab-9f16c\",\r\n  storageBucket: \"logolab-9f16c.appspot.com\",\r\n  messagingSenderId: \"412573554975\",\r\n  appId: \"1:412573554975:web:3e425abccbb844e985782a\",\r\n};\r\n\r\n// Initialize Firebase\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\n\r\n// Initialize Firebase Auth and Firestore\r\nconst auth = getAuth(firebaseApp);\r\nconst db = getFirestore(firebaseApp);\r\nconst provider = new GoogleAuthProvider();\r\n\r\n// Set custom parameters for the Google Auth provider\r\nprovider.setCustomParameters({\r\n  prompt: \"select_account\",\r\n});\r\n\r\n// Function to store user data in Firestore\r\nconst createUserDocumentFromAuth = async (userAuth) => {\r\n  if (!userAuth) return;\r\n\r\n  const userDocRef = doc(db, \"users\", userAuth.uid);\r\n  const userSnapshot = await getDoc(userDocRef);\r\n\r\n  if (!userSnapshot.exists()) {\r\n    const { displayName, email, photoURL } = userAuth;\r\n    const createdAt = new Date();\r\n\r\n    try {\r\n      await setDoc(userDocRef, {\r\n        displayName,\r\n        email,\r\n        photoURL,\r\n        createdAt,\r\n        subscription: \"free\",\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error creating user document:\", error);\r\n    }\r\n  }\r\n\r\n  return userDocRef;\r\n};\r\n\r\n// Function to retrieve user information from Firestore by UID\r\nconst getUserByUID = async (uid) => {\r\n  try {\r\n    // Construct a reference to the user document using the UID\r\n    const userDocRef = doc(db, \"users\", uid);\r\n\r\n    // Retrieve the user document snapshot\r\n    const userSnapshot = await getDoc(userDocRef);\r\n\r\n    // Check if the document exists\r\n    if (userSnapshot.exists()) {\r\n      // Access the user data from the snapshot\r\n      const userData = userSnapshot.data();\r\n      return userData;\r\n    } else {\r\n      // Handle case where user document does not exist\r\n      console.log(\"User document does not exist\");\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    // Handle any errors that occur during the process\r\n    console.error(\"Error fetching user document:\", error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Export sign-in and sign-out functions\r\nexport const signInWithGooglePopup = async () => {\r\n  const result = await signInWithPopup(auth, provider);\r\n  await createUserDocumentFromAuth(result.user);\r\n  return result;\r\n};\r\n\r\nexport const signOutUser = () => signOut(auth);\r\nexport const onAuthStateChangedListener = (callback) =>\r\n  onAuthStateChanged(auth, callback);\r\nexport { auth, db, getUserByUID };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}