{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\Projects\\\\LogoLab\\\\src\\\\components\\\\posts\\\\posts.component.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from \"react\";\nimport \"./posts.styles.scss\";\nimport Comments from \"../comments/comments.components\";\nimport { CommunityContext } from \"../../utilities/context/community.context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Posts = () => {\n  _s();\n  const {\n    postData,\n    commentData,\n    setPostData\n  } = useContext(CommunityContext);\n  const [sortedPosts, setSortedPosts] = useState([]);\n  useEffect(() => {\n    // Function to sort posts by dateCreated\n    const sortByDateCreated = (a, b) => {\n      return new Date(b.dateCreated) - new Date(a.dateCreated);\n    };\n\n    // Sort postData by dateCreated\n    const sortedPosts = postData.slice().sort(sortByDateCreated);\n    setSortedPosts(sortedPosts);\n  }, [postData]);\n\n  //change the status of the comment if show or not\n  const enableComment = id => {\n    const updatedPostData = postData.map(post => post.ID === id ? {\n      ...post,\n      commentStatus: !post.commentStatus\n    } : post);\n    setPostData(updatedPostData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"postsContainer\",\n    children: sortedPosts.map((data, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"postsContentsContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: data.postDescription\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [data.likedBy.length, \" Liked\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => enableComment(data.ID),\n            children: \"Comment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: data.commentStatus && /*#__PURE__*/_jsxDEV(Comments, {\n            commentDatas: commentData,\n            postID: data.ID,\n            enableComment: enableComment\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this)]\n      }, data.ID, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(Posts, \"5m+v2Ds7OSnUgDBXU3WZQxj6NYI=\");\n_c = Posts;\nexport default Posts;\nvar _c;\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"names":["React","useState","useEffect","useContext","Comments","CommunityContext","jsxDEV","_jsxDEV","Posts","_s","postData","commentData","setPostData","sortedPosts","setSortedPosts","sortByDateCreated","a","b","Date","dateCreated","slice","sort","enableComment","id","updatedPostData","map","post","ID","commentStatus","className","children","data","index","postDescription","fileName","_jsxFileName","lineNumber","columnNumber","likedBy","length","onClick","commentDatas","postID","_c","$RefreshReg$"],"sources":["C:/Projects/Projects/LogoLab/src/components/posts/posts.component.jsx"],"sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport \"./posts.styles.scss\";\r\nimport Comments from \"../comments/comments.components\";\r\nimport { CommunityContext } from \"../../utilities/context/community.context\";\r\n\r\nconst Posts = () => {\r\n  const { postData, commentData, setPostData } = useContext(CommunityContext);\r\n  const [sortedPosts, setSortedPosts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Function to sort posts by dateCreated\r\n    const sortByDateCreated = (a, b) => {\r\n      return new Date(b.dateCreated) - new Date(a.dateCreated);\r\n    };\r\n\r\n    // Sort postData by dateCreated\r\n    const sortedPosts = postData.slice().sort(sortByDateCreated);\r\n    setSortedPosts(sortedPosts);\r\n  }, [postData]);\r\n\r\n  //change the status of the comment if show or not\r\n  const enableComment = (id) => {\r\n    const updatedPostData = postData.map((post) =>\r\n      post.ID === id ? { ...post, commentStatus: !post.commentStatus } : post\r\n    );\r\n    setPostData(updatedPostData);\r\n  };\r\n\r\n  return (\r\n    <div className=\"postsContainer\">\r\n      {sortedPosts.map((data, index) => {\r\n        return (\r\n          <div className=\"postsContentsContainer\" key={data.ID}>\r\n            <p>{data.postDescription}</p>\r\n            <hr />\r\n            <div>\r\n              <div>{data.likedBy.length} Liked</div>\r\n              <div onClick={() => enableComment(data.ID)}>Comment</div>\r\n            </div>\r\n            <div>\r\n              {data.commentStatus && (\r\n                <Comments\r\n                  commentDatas={commentData}\r\n                  postID={data.ID}\r\n                  enableComment={enableComment}\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Posts;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}