{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\Projects\\\\LogoLab\\\\src\\\\components\\\\posts\\\\posts.component.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from \"react\";\nimport \"./posts.styles.scss\";\nimport Comments from \"../comments/comments.components\";\nimport { CommunityContext } from \"../../utilities/context/community.context\";\nimport { UserContext } from \"../../utilities/context/user.context\";\nimport InsertComment from \"../insertComment/insertComment.component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Posts = ({\n  communityPosts\n}) => {\n  _s();\n  const {\n    postData,\n    commentData,\n    setPostData\n  } = useContext(CommunityContext);\n  const [sortedPosts, setSortedPosts] = useState([]);\n  const {\n    currentUser\n  } = useContext(UserContext);\n  useEffect(() => {\n    let sortedPosts;\n    if (communityPosts === \"home\") {\n      sortedPosts = postData.slice().sort((a, b) => new Date(b.dateCreated) - new Date(a.dateCreated));\n    } else if (communityPosts === \"popular\") {\n      sortedPosts = postData.slice().sort((a, b) => {\n        // Sort first by the number of likes (descending)\n        const likesComparison = b.likedBy.length - a.likedBy.length;\n        if (likesComparison !== 0) {\n          return likesComparison;\n        }\n        // If likes are equal, sort by dateCreated (descending)\n        return new Date(b.dateCreated) - new Date(a.dateCreated);\n      });\n    } else {\n      // Assuming the condition is for posts created by the current user\n      sortedPosts = postData.slice().sort((a, b) => new Date(b.dateCreated) - new Date(a.dateCreated)).filter(data => data.createdBy.userID === currentUser.userID);\n    }\n    setSortedPosts(sortedPosts);\n  }, [postData, communityPosts, currentUser]);\n\n  //change the status of the comment if show or not\n  const enableComment = id => {\n    const updatedPostData = postData.map(post => post.ID === id ? {\n      ...post,\n      commentStatus: !post.commentStatus\n    } : post);\n    setPostData(updatedPostData);\n  };\n  const likePost = id => {\n    if (!currentUser) {\n      return;\n    }\n    const updatedPostData = postData.map(post => {\n      if (post.ID === id) {\n        const likedIndex = post.likedBy.findIndex(like => like.userID === currentUser.uid);\n        if (likedIndex !== -1) {\n          // User already liked the post, remove the like\n          const updatedLikedBy = [...post.likedBy];\n          updatedLikedBy.splice(likedIndex, 1);\n          return {\n            ...post,\n            likedBy: updatedLikedBy\n          };\n        } else {\n          // User hasn't liked the post yet, add the like\n          return {\n            ...post,\n            likedBy: [...post.likedBy, {\n              userID: currentUser.uid,\n              username: currentUser.displayName,\n              displayProfile: currentUser.displayProfile\n            }]\n          };\n        }\n      } else {\n        return post;\n      }\n    });\n    setPostData(updatedPostData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"postsContainer\",\n    children: sortedPosts.map((data, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"postsContentsContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"posterInfoContainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: data.createdBy.displayProfile ? data.createdBy.displayProfile : `https://robohash.org/${data.createdBy.userID}?set=set2`,\n            alt: \"Poster Avatar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: data.createdBy.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: data.postDescription\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => likePost(data.ID),\n            children: [data.likedBy.length, \" Liked\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => enableComment(data.ID),\n            children: \"Comment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: data.commentStatus && /*#__PURE__*/_jsxDEV(Comments, {\n            commentDatas: commentData,\n            postID: data.ID,\n            enableComment: enableComment\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(InsertComment, {\n          postID: data.ID\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this)]\n      }, data.ID, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(Posts, \"KXz3rJgg0TQuC/hqXJryeksvEdw=\");\n_c = Posts;\nexport default Posts;\nvar _c;\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"names":["React","useState","useEffect","useContext","Comments","CommunityContext","UserContext","InsertComment","jsxDEV","_jsxDEV","Posts","communityPosts","_s","postData","commentData","setPostData","sortedPosts","setSortedPosts","currentUser","slice","sort","a","b","Date","dateCreated","likesComparison","likedBy","length","filter","data","createdBy","userID","enableComment","id","updatedPostData","map","post","ID","commentStatus","likePost","likedIndex","findIndex","like","uid","updatedLikedBy","splice","username","displayName","displayProfile","className","children","index","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","postDescription","onClick","commentDatas","postID","_c","$RefreshReg$"],"sources":["C:/Projects/Projects/LogoLab/src/components/posts/posts.component.jsx"],"sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport \"./posts.styles.scss\";\r\nimport Comments from \"../comments/comments.components\";\r\nimport { CommunityContext } from \"../../utilities/context/community.context\";\r\nimport { UserContext } from \"../../utilities/context/user.context\";\r\nimport InsertComment from \"../insertComment/insertComment.component\";\r\n\r\nconst Posts = ({ communityPosts }) => {\r\n  const { postData, commentData, setPostData } = useContext(CommunityContext);\r\n  const [sortedPosts, setSortedPosts] = useState([]);\r\n  const { currentUser } = useContext(UserContext);\r\n  useEffect(() => {\r\n    let sortedPosts;\r\n\r\n    if (communityPosts === \"home\") {\r\n      sortedPosts = postData\r\n        .slice()\r\n        .sort((a, b) => new Date(b.dateCreated) - new Date(a.dateCreated));\r\n    } else if (communityPosts === \"popular\") {\r\n      sortedPosts = postData.slice().sort((a, b) => {\r\n        // Sort first by the number of likes (descending)\r\n        const likesComparison = b.likedBy.length - a.likedBy.length;\r\n        if (likesComparison !== 0) {\r\n          return likesComparison;\r\n        }\r\n        // If likes are equal, sort by dateCreated (descending)\r\n        return new Date(b.dateCreated) - new Date(a.dateCreated);\r\n      });\r\n    } else {\r\n      // Assuming the condition is for posts created by the current user\r\n      sortedPosts = postData\r\n        .slice()\r\n        .sort((a, b) => new Date(b.dateCreated) - new Date(a.dateCreated))\r\n        .filter((data) => data.createdBy.userID === currentUser.userID);\r\n    }\r\n\r\n    setSortedPosts(sortedPosts);\r\n  }, [postData, communityPosts, currentUser]);\r\n\r\n  //change the status of the comment if show or not\r\n  const enableComment = (id) => {\r\n    const updatedPostData = postData.map((post) =>\r\n      post.ID === id ? { ...post, commentStatus: !post.commentStatus } : post\r\n    );\r\n    setPostData(updatedPostData);\r\n  };\r\n\r\n  const likePost = (id) => {\r\n    if (!currentUser) {\r\n      return;\r\n    }\r\n\r\n    const updatedPostData = postData.map((post) => {\r\n      if (post.ID === id) {\r\n        const likedIndex = post.likedBy.findIndex(\r\n          (like) => like.userID === currentUser.uid\r\n        );\r\n        if (likedIndex !== -1) {\r\n          // User already liked the post, remove the like\r\n          const updatedLikedBy = [...post.likedBy];\r\n          updatedLikedBy.splice(likedIndex, 1);\r\n          return {\r\n            ...post,\r\n            likedBy: updatedLikedBy,\r\n          };\r\n        } else {\r\n          // User hasn't liked the post yet, add the like\r\n          return {\r\n            ...post,\r\n            likedBy: [\r\n              ...post.likedBy,\r\n              {\r\n                userID: currentUser.uid,\r\n                username: currentUser.displayName,\r\n                displayProfile: currentUser.displayProfile,\r\n              },\r\n            ],\r\n          };\r\n        }\r\n      } else {\r\n        return post;\r\n      }\r\n    });\r\n    setPostData(updatedPostData);\r\n  };\r\n\r\n  return (\r\n    <div className=\"postsContainer\">\r\n      {sortedPosts.map((data, index) => {\r\n        return (\r\n          <div className=\"postsContentsContainer\" key={data.ID}>\r\n            <div className=\"posterInfoContainer\">\r\n              <img\r\n                src={\r\n                  data.createdBy.displayProfile\r\n                    ? data.createdBy.displayProfile\r\n                    : `https://robohash.org/${data.createdBy.userID}?set=set2`\r\n                }\r\n                alt=\"Poster Avatar\"\r\n              />\r\n              <div>{data.createdBy.username}</div>\r\n            </div>\r\n            <p>{data.postDescription}</p>\r\n            <hr />\r\n            <div>\r\n              <div onClick={() => likePost(data.ID)}>\r\n                {data.likedBy.length} Liked\r\n              </div>\r\n              <div onClick={() => enableComment(data.ID)}>Comment</div>\r\n            </div>\r\n            <div>\r\n              {data.commentStatus && (\r\n                <Comments\r\n                  commentDatas={commentData}\r\n                  postID={data.ID}\r\n                  enableComment={enableComment}\r\n                />\r\n              )}\r\n            </div>\r\n\r\n            <InsertComment postID={data.ID} />\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Posts;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}